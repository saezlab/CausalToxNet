IDmap <- read.table(file = system.file("HUMAN_9606_idmapping_onlyGeneName.dat",package="CARNIVAL"),header = F,sep = "\t",stringsAsFactors = F)
print("Mapping Uniprot to Gene Symbols....")
# Map each element in 'res' -> always take the first ID if there are many hit entries and collect unmapped nodes
Unmapped <- NULL
# Common SIF
for (counter in 1:length(net[,1])) {
if (length(IDmap[which(IDmap[,1] == net[counter,1]),3])>0) {
net[counter,1] <- IDmap[which(IDmap[,1] == net[counter,1]),3][1]
} else {
Unmapped <- c(Unmapped,net[counter,1])
}
if (length(IDmap[which(IDmap[,1] == net[counter,3]),3])>0) {
net[counter,3] <- IDmap[which(IDmap[,1] == net[counter,3]),3][1]
} else {
Unmapped <- c(Unmapped,net[counter,3])
}
}
# Common node activity
for (counter in 1:length(nodeAttr[,1])) {
if (length(IDmap[which(IDmap[,1] == nodeAttr[counter,1]),3])>0) {
nodeAttr[counter,1] <- IDmap[which(IDmap[,1] == nodeAttr[counter,1]),3][1]
} else {
Unmapped <- c(Unmapped,nodeAttr[counter,1])
}
}
print("- Done -")
}
# Remove edges based on edge threshold (if specified)
if (!is.null(thresEdgeAll)) {
if (length(which(as.numeric(net[,4])<thresEdgeAll))!=0) {
net <- net[-which(as.numeric(net[,4])<thresEdgeAll),]
}
}
# Remove nodes (and corresponding edges) based on node threshold (if specified)
if (!is.null(thresNodeAll)) {
nodesBelowThres <- nodeAttr[which(abs(as.numeric(nodeAttr[,5]))<thresNodeAll & abs(as.numeric(nodeAttr[,5]))!=0),1]
if (length(nodesBelowThres)>0) {
IdxEdge2rm <- NULL
for (counter in 1:length(nodesBelowThres)) {
if (nodesBelowThres[counter] %in% c(net[,1],net[,3])) {
IdxEdge2rm <- c(IdxEdge2rm,which(nodesBelowThres[counter] == net[,1]),which(nodesBelowThres[counter] == net[,3]))
}
}
if (!is.null(IdxEdge2rm)) {
net <- net[-unique(IdxEdge2rm),]
}
}
}
# Identify input TFs
inputTFs <- nodeAttr[which(nodeAttr[,6]=="P"),1]
# ======================= #
# "rcytoscapejs" pipeline #
# ======================= #
# # Extract and map network information
# netInputs <- setdiff(net[,1],net[,3])
#
# network <- as.data.frame(cbind(net[,1],net[,3],net[,2],net[,4]),stringsAsFactors=F); colnames(network) <- c("Source","Target","Type","Weight")
#
# allNodes <- unique(c(network[,1],network[,2]))
# nodeAct <- rep(NA,length(allNodes))
# for (counter in 1:length(nodeAct)) {
#   nodeAct[counter] <- nodeAttr$AvgAct[which(allNodes[counter]==nodeAttr$Node)]
# }
#
# nodeData <- data.frame(id=unique(c(network[,1],network[,2])),name=unique(c(network[,1],network[,2])),stringsAsFactors = F)
# nodeColorDefault <- "#DBDBDB"
# nodeData$color <- rep(nodeColorDefault,nrow(nodeData))
# # Blue set
# nodeData$color[which(nodeAct>90)] <- "#8488FF"
# nodeData$color[which(nodeAct>70 & nodeAct<90)] <- "#A1A4FF"
# nodeData$color[which(nodeAct>50 & nodeAct<70)] <- "#BDBFFF"
# nodeData$color[which(nodeAct>30 & nodeAct<50)] <- "#DADBFF"
# nodeData$color[which(nodeAct>10 & nodeAct<30)] <- "#F6F6FF"
# # # Green set
# # nodeData$color[which(nodeAct>90)] <- "#4EE968"
# # nodeData$color[which(nodeAct>70 & nodeAct<90)] <- "#68E97D"
# # nodeData$color[which(nodeAct>50 & nodeAct<70)] <- "#82E993"
# # nodeData$color[which(nodeAct>30 & nodeAct<50)] <- "#9BE9A8"
# # nodeData$color[which(nodeAct>10 & nodeAct<30)] <- "#CFE9D4"
# # Red set
# nodeData$color[which(nodeAct< -90)] <- "#FF7070"
# nodeData$color[which(nodeAct< -70 & nodeAct> -90)] <- "#FF8E8E"
# nodeData$color[which(nodeAct< -50 & nodeAct> -70)] <- "#FFA5A5"
# nodeData$color[which(nodeAct< -30 & nodeAct> -50)] <- "#FFBCBC"
# nodeData$color[which(nodeAct< -10 & nodeAct> -30)] <- "#FFECEC"
#
# nodeShapeDefault <- "ellipse"
# nodeData$shape <- rep(nodeShapeDefault, nrow(nodeData))
# nodeData$shape[which(nodeData[,1] %in% inputTFs)] <- "triangle"
# nodeData$shape[which(nodeData[,1] %in% netInputs)] <- "diamond"
#
# edgeData <- data.frame(source=network[,1], target=network[,2], stringsAsFactors=FALSE)
# edgeColorDefault <- "#DBDBDB"
# edgeData$color <- rep(edgeColorDefault,nrow(edgeData))
#
# network[,4] <- as.numeric(network[,4])
#
# # Red set
# edgeData$color[which(network[,3]==-1 & network[,4]>90)] <- "#FF5050"
# edgeData$color[which(network[,3]==-1 & network[,4]>70 & network[,4]<90)] <- "#FF8E8E"
# edgeData$color[which(network[,3]==-1 & network[,4]>50 & network[,4]<70)] <- "#FFA5A5"
# edgeData$color[which(network[,3]==-1 & network[,4]>30 & network[,4]<50)] <- "#FFBCBC"
# edgeData$color[which(network[,3]==-1 & network[,4]>10 & network[,4]<30)] <- "#FFECEC"
#
# # Blue Set
# edgeData$color[which(network[,3]==1 & network[,4]>90)] <- "#5650FF"
# edgeData$color[which(network[,3]==1 & network[,4]>70 & network[,4]<90)] <- "#A1A4FF"
# edgeData$color[which(network[,3]==1 & network[,4]>50 & network[,4]<70)] <- "#BDBFFF"
# edgeData$color[which(network[,3]==1 & network[,4]>30 & network[,4]<50)] <- "#DADBFF"
# edgeData$color[which(network[,3]==1 & network[,4]>10 & network[,4]<30)] <- "#F6F6FF"
#
# nodeDataReactive$nodeData <- nodeData
# nodeDataReactive$edgeData <- edgeData
# nodeDataReactive$network <- network
# =================== #
# visNetwork pipeline #
# =================== #
# Initialise matrices
AllNodes <- sort(unique(c(net[,1],net[,3])))
nodesVis <- as.data.frame(matrix(NA,length(AllNodes),4))
edgesVis <- as.data.frame(matrix(NA,nrow(net),4))
colnames(nodesVis) <- c("id","label","level","value")
colnames(edgesVis) <- c("from","to","sign","value")
# Mapping
# Node
nodesVis[,1] <- as.numeric(1:length(AllNodes))
nodesVis[,2] <- AllNodes
nodesVis[,3] <- 2
netInputs <- setdiff(net[,1],net[,3])
for (counter in 1:length(netInputs)) {
nodesVis[which(netInputs[counter]==AllNodes),3] <- 1
}
inputTFs <- nodeAttr[which(nodeAttr[,6]=="P"),1]
for (counter in 1:length(inputTFs)) {
nodesVis[which(inputTFs[counter]==AllNodes),3] <- 3
}
for (counter in 1:length(AllNodes)) {
nodesVis[counter,4] <- nodeAttr$AvgAct[which(nodesVis[counter,2]==nodeAttr$Node)]
}
# Edge
for (counter in 1:nrow(net)) {
edgesVis[counter,1] <- nodesVis$id[which(net$Node1[counter]==nodesVis$label)]
edgesVis[counter,2] <- nodesVis$id[which(net$Node2[counter]==nodesVis$label)]
edgesVis[counter,3] <- net$Sign[counter]
edgesVis[counter,4] <- net$Weight[counter]
}
nodesVis$color.background <- rep(NA,nrow(nodesVis))
for (counter in 1:nrow(nodesVis)) {
nodesVis$color.background[counter] <-
if (nodesVis$val[counter]>0) {"lightgreen"}
else if (nodesVis$val[counter]<0) {"tomato"}
else if (nodesVis$val[counter]==0) {"grey"}
}
nodesVis$color.highlight.background <- rep(NA,nrow(nodesVis))
nodesVis$shape <- rep(NA,nrow(nodesVis))
for (counter in 1:nrow(nodesVis)) {
nodesVis$shape[counter] <-
if (nodesVis$level[counter]==1) {"diamond"}
else if (nodesVis$level[counter]==2) {"circle"}
else if (nodesVis$level[counter]==3) {"triangle"}
}
nodesVis <- select(nodesVis,-level)
edgesVis$color <- rep(NA,nrow(edgesVis))
for (counter in 1:length(edgesVis$color)) {
edgesVis$color[counter] <- ifelse(test = edgesVis$sign[counter]==1,yes = "green",no = "red")
}
edgesVis$value <- edgesVis$value/10
nodesVis$value <- abs(nodesVis$value*10)
# edgesVis$value <- rep(NA,nrow(edgesVis))
# for (counter in 1:length(edgesVis$value)) {
#   edgesVis$value
# }
nodeDataReactive$nodeDataVis <- nodesVis
nodeDataReactive$edgeDataVis <- edgesVis
# write.table(x = nodesVis,file = "nodesVis_CARNIVAL.tsv",quote = F,sep = "\t",row.names = F,col.names = T)
# write.table(x = edgesVis,file = "edgesVis_CARNIVAL.tsv",quote = F,sep = "\t",row.names = F,col.names = T)
# visNetwork(nodes = nodesVis, edges = edgesVis) %>%
#   visEdges(arrows = 'to', scaling = list(min = 2, max = 2)) %>%
#   # visHierarchicalLayout(direction = "UD") %>%
#   visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%
# visIgraphLayout(layout = "layout_as_tree", flip.y = F) %>%
#   visNodes(color = list(border="grey"))
})
# output$g3plot = renderRcytoscapejs({
#   if (nrow(nodeDataReactive$nodeData) > 0){
#     networkJS <- createCytoscapeJsNetwork(nodeData = nodeDataReactive$nodeData, edgeData = nodeDataReactive$edgeData,nodeLabelColor = "#000000")
#     rcytoscapejs(nodeEntries = networkJS$nodes,edgeEntries = networkJS$edges, layout = graphLayout)
#   } else {
#     stop("No network to be shown")
#     }
# })
output$g3plot = renderVisNetwork({
if (nrow(nodeDataReactive$nodeDataVis) > 0){
visNetwork(nodes = nodeDataReactive$nodeDataVis, edges = nodeDataReactive$edgeDataVis, width="100%") %>%
visEdges(arrows = 'to') %>%
visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%
visIgraphLayout(layout = graphLayoutName, flip.y = F) %>%
visNodes(color = list(border="grey"))
} else {
stop("No network to be shown")
}
})
}
ShinyInput <- list(ui=ui,server=server)
runApp(ShinyInput)
load_all()
shinyCARNIVAL(dir_name = dir_name,thresNodeAll = 50,thresEdgeAll = 50)
shinyCARNIVAL(dir_name = dir_name,thresNodeAll = 50,thresEdgeAll = 50,graphLayout = 2)
load_all()
shinyCARNIVAL(dir_name = dir_name,thresNodeAll = 50,thresEdgeAll = 50,graphLayout = 2)
# library(threejs)
if (graphLayout==1) {graphLayoutName <- "layout_as_tree"}
else if (graphLayout==2) {graphLayoutName <- "layout_in_circle"}
# library(threejs)
if (graphLayout==1) {graphLayoutName <- "layout_as_tree"
} else if (graphLayout==2) {graphLayoutName <- "layout_in_circle"
} else if (graphLayout==3) {graphLayoutName <- "layout_on_grid"
} else if (graphLayout==4) {graphLayoutName <- "layout_on_sphere"
} else {graphLayoutName <- "layout_nicely"}
graphLayout
graphLayoutName
shinyCARNIVAL(dir_name = dir_name,thresNodeAll = 50,thresEdgeAll = 50,graphLayout = 2)
shinyCARNIVAL(dir_name = dir_name,thresNodeAll = 50,thresEdgeAll = 50,graphLayout = 3)
shinyCARNIVAL(dir_name = dir_name,thresNodeAll = 50,thresEdgeAll = 50,graphLayout = 1)
load_all()
shinyCARNIVAL(dir_name = dir_name,thresNodeAll = 50,thresEdgeAll = 50,graphLayout = 1)
library(shiny)
# library(rcytoscapejs)
library(visNetwork)
library(tidyverse)
# library(threejs)
if (graphLayout==1) {graphLayoutName <- "layout_as_tree"
} else if (graphLayout==2) {graphLayoutName <- "layout_in_circle"
} else if (graphLayout==3) {graphLayoutName <- "layout_on_grid"
} else if (graphLayout==4) {graphLayoutName <- "layout_on_sphere"
} else {graphLayoutName <- "layout_nicely"}
ui = shinyUI(
fluidPage(
titlePanel("CARNIVAL results on R-Shiny"),
mainPanel(
# rcytoscapejsOutput("g3plot")
visNetworkOutput("g3plot")
)
)
)
server = function(input, output) {
nodeDataReactive <- reactiveValues()
observe({
net = read.table(file = paste0(dir_name,"/weightedModel_1.txt"),header = T,sep = "\t",stringsAsFactors = F)
nodeAttr = read.table(file = paste0(dir_name,"/nodesAttributes_1.txt"),header = T,sep = "\t",stringsAsFactors = F)
if (inverseCR) {
net <- net[-which(net[,1]=="Perturbation"),]
}
if (UP2GS) {
# Select mapping file
IDmap <- read.table(file = system.file("HUMAN_9606_idmapping_onlyGeneName.dat",package="CARNIVAL"),header = F,sep = "\t",stringsAsFactors = F)
print("Mapping Uniprot to Gene Symbols....")
# Map each element in 'res' -> always take the first ID if there are many hit entries and collect unmapped nodes
Unmapped <- NULL
# Common SIF
for (counter in 1:length(net[,1])) {
if (length(IDmap[which(IDmap[,1] == net[counter,1]),3])>0) {
net[counter,1] <- IDmap[which(IDmap[,1] == net[counter,1]),3][1]
} else {
Unmapped <- c(Unmapped,net[counter,1])
}
if (length(IDmap[which(IDmap[,1] == net[counter,3]),3])>0) {
net[counter,3] <- IDmap[which(IDmap[,1] == net[counter,3]),3][1]
} else {
Unmapped <- c(Unmapped,net[counter,3])
}
}
# Common node activity
for (counter in 1:length(nodeAttr[,1])) {
if (length(IDmap[which(IDmap[,1] == nodeAttr[counter,1]),3])>0) {
nodeAttr[counter,1] <- IDmap[which(IDmap[,1] == nodeAttr[counter,1]),3][1]
} else {
Unmapped <- c(Unmapped,nodeAttr[counter,1])
}
}
print("- Done -")
}
# Remove edges based on edge threshold (if specified)
if (!is.null(thresEdgeAll)) {
if (length(which(as.numeric(net[,4])<thresEdgeAll))!=0) {
net <- net[-which(as.numeric(net[,4])<thresEdgeAll),]
}
}
# Remove nodes (and corresponding edges) based on node threshold (if specified)
if (!is.null(thresNodeAll)) {
nodesBelowThres <- nodeAttr[which(abs(as.numeric(nodeAttr[,5]))<thresNodeAll & abs(as.numeric(nodeAttr[,5]))!=0),1]
if (length(nodesBelowThres)>0) {
IdxEdge2rm <- NULL
for (counter in 1:length(nodesBelowThres)) {
if (nodesBelowThres[counter] %in% c(net[,1],net[,3])) {
IdxEdge2rm <- c(IdxEdge2rm,which(nodesBelowThres[counter] == net[,1]),which(nodesBelowThres[counter] == net[,3]))
}
}
if (!is.null(IdxEdge2rm)) {
net <- net[-unique(IdxEdge2rm),]
}
}
}
# Identify input TFs
inputTFs <- nodeAttr[which(nodeAttr[,6]=="P"),1]
# ======================= #
# "rcytoscapejs" pipeline #
# ======================= #
# # Extract and map network information
# netInputs <- setdiff(net[,1],net[,3])
#
# network <- as.data.frame(cbind(net[,1],net[,3],net[,2],net[,4]),stringsAsFactors=F); colnames(network) <- c("Source","Target","Type","Weight")
#
# allNodes <- unique(c(network[,1],network[,2]))
# nodeAct <- rep(NA,length(allNodes))
# for (counter in 1:length(nodeAct)) {
#   nodeAct[counter] <- nodeAttr$AvgAct[which(allNodes[counter]==nodeAttr$Node)]
# }
#
# nodeData <- data.frame(id=unique(c(network[,1],network[,2])),name=unique(c(network[,1],network[,2])),stringsAsFactors = F)
# nodeColorDefault <- "#DBDBDB"
# nodeData$color <- rep(nodeColorDefault,nrow(nodeData))
# # Blue set
# nodeData$color[which(nodeAct>90)] <- "#8488FF"
# nodeData$color[which(nodeAct>70 & nodeAct<90)] <- "#A1A4FF"
# nodeData$color[which(nodeAct>50 & nodeAct<70)] <- "#BDBFFF"
# nodeData$color[which(nodeAct>30 & nodeAct<50)] <- "#DADBFF"
# nodeData$color[which(nodeAct>10 & nodeAct<30)] <- "#F6F6FF"
# # # Green set
# # nodeData$color[which(nodeAct>90)] <- "#4EE968"
# # nodeData$color[which(nodeAct>70 & nodeAct<90)] <- "#68E97D"
# # nodeData$color[which(nodeAct>50 & nodeAct<70)] <- "#82E993"
# # nodeData$color[which(nodeAct>30 & nodeAct<50)] <- "#9BE9A8"
# # nodeData$color[which(nodeAct>10 & nodeAct<30)] <- "#CFE9D4"
# # Red set
# nodeData$color[which(nodeAct< -90)] <- "#FF7070"
# nodeData$color[which(nodeAct< -70 & nodeAct> -90)] <- "#FF8E8E"
# nodeData$color[which(nodeAct< -50 & nodeAct> -70)] <- "#FFA5A5"
# nodeData$color[which(nodeAct< -30 & nodeAct> -50)] <- "#FFBCBC"
# nodeData$color[which(nodeAct< -10 & nodeAct> -30)] <- "#FFECEC"
#
# nodeShapeDefault <- "ellipse"
# nodeData$shape <- rep(nodeShapeDefault, nrow(nodeData))
# nodeData$shape[which(nodeData[,1] %in% inputTFs)] <- "triangle"
# nodeData$shape[which(nodeData[,1] %in% netInputs)] <- "diamond"
#
# edgeData <- data.frame(source=network[,1], target=network[,2], stringsAsFactors=FALSE)
# edgeColorDefault <- "#DBDBDB"
# edgeData$color <- rep(edgeColorDefault,nrow(edgeData))
#
# network[,4] <- as.numeric(network[,4])
#
# # Red set
# edgeData$color[which(network[,3]==-1 & network[,4]>90)] <- "#FF5050"
# edgeData$color[which(network[,3]==-1 & network[,4]>70 & network[,4]<90)] <- "#FF8E8E"
# edgeData$color[which(network[,3]==-1 & network[,4]>50 & network[,4]<70)] <- "#FFA5A5"
# edgeData$color[which(network[,3]==-1 & network[,4]>30 & network[,4]<50)] <- "#FFBCBC"
# edgeData$color[which(network[,3]==-1 & network[,4]>10 & network[,4]<30)] <- "#FFECEC"
#
# # Blue Set
# edgeData$color[which(network[,3]==1 & network[,4]>90)] <- "#5650FF"
# edgeData$color[which(network[,3]==1 & network[,4]>70 & network[,4]<90)] <- "#A1A4FF"
# edgeData$color[which(network[,3]==1 & network[,4]>50 & network[,4]<70)] <- "#BDBFFF"
# edgeData$color[which(network[,3]==1 & network[,4]>30 & network[,4]<50)] <- "#DADBFF"
# edgeData$color[which(network[,3]==1 & network[,4]>10 & network[,4]<30)] <- "#F6F6FF"
#
# nodeDataReactive$nodeData <- nodeData
# nodeDataReactive$edgeData <- edgeData
# nodeDataReactive$network <- network
# =================== #
# visNetwork pipeline #
# =================== #
# Initialise matrices
AllNodes <- sort(unique(c(net[,1],net[,3])))
nodesVis <- as.data.frame(matrix(NA,length(AllNodes),4))
edgesVis <- as.data.frame(matrix(NA,nrow(net),4))
colnames(nodesVis) <- c("id","label","level","value")
colnames(edgesVis) <- c("from","to","sign","value")
# Mapping
# Node
nodesVis[,1] <- as.numeric(1:length(AllNodes))
nodesVis[,2] <- AllNodes
nodesVis[,3] <- 2
netInputs <- setdiff(net[,1],net[,3])
for (counter in 1:length(netInputs)) {
nodesVis[which(netInputs[counter]==AllNodes),3] <- 1
}
inputTFs <- nodeAttr[which(nodeAttr[,6]=="P"),1]
for (counter in 1:length(inputTFs)) {
nodesVis[which(inputTFs[counter]==AllNodes),3] <- 3
}
for (counter in 1:length(AllNodes)) {
nodesVis[counter,4] <- nodeAttr$AvgAct[which(nodesVis[counter,2]==nodeAttr$Node)]
}
# Edge
for (counter in 1:nrow(net)) {
edgesVis[counter,1] <- nodesVis$id[which(net$Node1[counter]==nodesVis$label)]
edgesVis[counter,2] <- nodesVis$id[which(net$Node2[counter]==nodesVis$label)]
edgesVis[counter,3] <- net$Sign[counter]
edgesVis[counter,4] <- net$Weight[counter]
}
nodesVis$color.background <- rep(NA,nrow(nodesVis))
for (counter in 1:nrow(nodesVis)) {
nodesVis$color.background[counter] <-
if (nodesVis$val[counter]>0) {"lightgreen"}
else if (nodesVis$val[counter]<0) {"tomato"}
else if (nodesVis$val[counter]==0) {"grey"}
}
nodesVis$color.highlight.background <- rep(NA,nrow(nodesVis))
nodesVis$shape <- rep(NA,nrow(nodesVis))
for (counter in 1:nrow(nodesVis)) {
nodesVis$shape[counter] <-
if (nodesVis$level[counter]==1) {"diamond"}
else if (nodesVis$level[counter]==2) {"circle"}
else if (nodesVis$level[counter]==3) {"triangle"}
}
nodesVis <- select(nodesVis,-level)
edgesVis$color <- rep(NA,nrow(edgesVis))
for (counter in 1:length(edgesVis$color)) {
edgesVis$color[counter] <- ifelse(test = edgesVis$sign[counter]==1,yes = "green",no = "red")
}
edgesVis$value <- edgesVis$value/10
nodesVis$value <- abs(nodesVis$value*10)
# edgesVis$value <- rep(NA,nrow(edgesVis))
# for (counter in 1:length(edgesVis$value)) {
#   edgesVis$value
# }
nodeDataReactive$nodeDataVis <- nodesVis
nodeDataReactive$edgeDataVis <- edgesVis
# write.table(x = nodesVis,file = "nodesVis_CARNIVAL.tsv",quote = F,sep = "\t",row.names = F,col.names = T)
# write.table(x = edgesVis,file = "edgesVis_CARNIVAL.tsv",quote = F,sep = "\t",row.names = F,col.names = T)
# visNetwork(nodes = nodesVis, edges = edgesVis) %>%
#   visEdges(arrows = 'to', scaling = list(min = 2, max = 2)) %>%
#   # visHierarchicalLayout(direction = "UD") %>%
#   visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%
# visIgraphLayout(layout = "layout_as_tree", flip.y = F) %>%
#   visNodes(color = list(border="grey"))
})
# output$g3plot = renderRcytoscapejs({
#   if (nrow(nodeDataReactive$nodeData) > 0){
#     networkJS <- createCytoscapeJsNetwork(nodeData = nodeDataReactive$nodeData, edgeData = nodeDataReactive$edgeData,nodeLabelColor = "#000000")
#     rcytoscapejs(nodeEntries = networkJS$nodes,edgeEntries = networkJS$edges, layout = graphLayout)
#   } else {
#     stop("No network to be shown")
#     }
# })
output$g3plot = renderVisNetwork({
if (nrow(nodeDataReactive$nodeDataVis) > 0){
visNetwork(nodes = nodeDataReactive$nodeDataVis, edges = nodeDataReactive$edgeDataVis, width="100%") %>%
visEdges(arrows = 'to') %>%
visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%
if (graphLayoutName==1) {
visIgraphLayout(layout = graphLayoutName, flip.y = F)
} else {
visIgraphLayout(layout = graphLayoutName)} %>%
visNodes(color = list(border="grey"))
} else {
stop("No network to be shown")
}
})
}
ShinyInput <- list(ui=ui,server=server)
runApp(ShinyInput)
graphLayoutName
load_all()
shinyCARNIVAL(dir_name = dir_name,thresNodeAll = 50,thresEdgeAll = 50,graphLayout = 1)
graphLayout
visNetwork(nodes = nodeDataReactive$nodeDataVis, edges = nodeDataReactive$edgeDataVis, width="100%") %>%
visEdges(arrows = 'to') %>%
visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%
if (graphLayout==1) {
visIgraphLayout(layout = graphLayoutName, flip.y = F)
} else {
visIgraphLayout(layout = graphLayoutName)} %>%
visNodes(color = list(border="grey"))
load_all()
shinyCARNIVAL(dir_name = dir_name,thresNodeAll = 50,thresEdgeAll = 50,graphLayout = 1)
load_all()
shinyCARNIVAL(dir_name = dir_name,thresNodeAll = 50,thresEdgeAll = 50,graphLayout = 1)
shinyCARNIVAL(dir_name = dir_name,thresNodeAll = 50,thresEdgeAll = 50,graphLayout = 1)
shinyCARNIVAL(dir_name = dir_name,thresNodeAll = 50,thresEdgeAll = 50,graphLayout = 2)
shinyCARNIVAL(dir_name = dir_name,thresNodeAll = 50,thresEdgeAll = 50,graphLayout = 3)
load_all()
shinyCARNIVAL(dir_name = dir_name,thresNodeAll = 50,thresEdgeAll = 50,graphLayout = 1)
shinyCARNIVAL(dir_name = dir_name,thresNodeAll = 50,thresEdgeAll = 50,graphLayout = 1)
shinyCARNIVAL(dir_name = dir_name,thresNodeAll = 50,thresEdgeAll = 50,graphLayout = 2)
shinyCARNIVAL(dir_name = dir_name,thresNodeAll = 50,thresEdgeAll = 50,graphLayout = 3)
shinyCARNIVAL(dir_name = dir_name,thresNodeAll = 50,thresEdgeAll = 50,graphLayout = 4)
shinyCARNIVAL(dir_name = dir_name,thresNodeAll = 50,thresEdgeAll = 50,graphLayout = 5)
shinyCARNIVAL(dir_name = dir_name,thresNodeAll = 50,thresEdgeAll = 50,graphLayout = 1)
load_all()
load_all()
shinyCARNIVAL(dir_name = dir_name,thresNodeAll = 50,thresEdgeAll = 50,graphLayout = 1)
shinyCARNIVAL(dir_name = dir_name,thresNodeAll = 50,thresEdgeAll = 50,graphLayout = 2)
shinyCARNIVAL(dir_name = dir_name,thresNodeAll = 50,thresEdgeAll = 50,graphLayout = 3)
shinyCARNIVAL(dir_name = dir_name,thresNodeAll = 50,thresEdgeAll = 50,graphLayout = 4)
shinyCARNIVAL(dir_name = dir_name,thresNodeAll = 50,thresEdgeAll = 50,graphLayout = 0)
shinyCARNIVAL(dir_name = "/Users/panuwattrairatphisan/Desktop/RWTH_Aachen/Saez_Group/Presentation/FuncOmics_Club/20190117_FuncOmics_Showcase/Results_CARNIVAL_Ex2/",thresNodeAll = 50,thresEdgeAll = 50,graphLayout = 0)
shinyCARNIVAL(dir_name = "/Users/panuwattrairatphisan/Desktop/RWTH_Aachen/Saez_Group/Presentation/FuncOmics_Club/20190117_FuncOmics_Showcase/Results_CARNIVAL_Ex2/",thresNodeAll = 50,thresEdgeAll = 50,graphLayout = 1,UP2GS=T)
load_all()
shinyCARNIVAL(dir_name = "/Users/panuwattrairatphisan/Desktop/RWTH_Aachen/Saez_Group/Presentation/FuncOmics_Club/20190117_FuncOmics_Showcase/Results_CARNIVAL_Ex1/",thresNodeAll = 50,thresEdgeAll = 50,graphLayout = 1,UP2GS=T)
shinyCARNIVAL(dir_name = "/Users/panuwattrairatphisan/Desktop/RWTH_Aachen/Saez_Group/Presentation/FuncOmics_Club/20190117_FuncOmics_Showcase/Results_CARNIVAL_Ex1/",thresNodeAll = 50,thresEdgeAll = 50,graphLayout = 2,UP2GS=T)
shinyCARNIVAL(dir_name = "/Users/panuwattrairatphisan/Desktop/RWTH_Aachen/Saez_Group/Presentation/FuncOmics_Club/20190117_FuncOmics_Showcase/Results_CARNIVAL_Ex1/",thresNodeAll = 50,thresEdgeAll = 50,graphLayout = 3,UP2GS=T)
shinyCARNIVAL(dir_name = "/Users/panuwattrairatphisan/Desktop/RWTH_Aachen/Saez_Group/Presentation/FuncOmics_Club/20190117_FuncOmics_Showcase/Results_CARNIVAL_Ex1/",thresNodeAll = 50,thresEdgeAll = 50,graphLayout = 4,UP2GS=T)
shinyCARNIVAL(dir_name = "/Users/panuwattrairatphisan/Desktop/RWTH_Aachen/Saez_Group/Presentation/FuncOmics_Club/20190117_FuncOmics_Showcase/Results_CARNIVAL_Ex1/",thresNodeAll = 50,thresEdgeAll = 50,graphLayout = 0,UP2GS=T)
shinyCARNIVAL(dir_name = "/Users/panuwattrairatphisan/Desktop/RWTH_Aachen/Saez_Group/Presentation/FuncOmics_Club/20190117_FuncOmics_Showcase/Results_CARNIVAL_Ex1/",thresNodeAll = 50,thresEdgeAll = 50,graphLayout = 1,UP2GS=T)
shinyCARNIVAL(dir_name = "/Users/panuwattrairatphisan/Desktop/RWTH_Aachen/Saez_Group/Presentation/FuncOmics_Club/20190117_FuncOmics_Showcase/Results_CARNIVAL_Ex2/",thresNodeAll = 50,thresEdgeAll = 50,graphLayout = 1,UP2GS=T)
shinyCARNIVAL(dir_name = "/Users/panuwattrairatphisan/Desktop/RWTH_Aachen/Saez_Group/Presentation/FuncOmics_Club/20190117_FuncOmics_Showcase/Results_CARNIVAL_Ex2/",thresNodeAll = 50,thresEdgeAll = 50,graphLayout = 2,UP2GS=T)
document()
document()
document()
getwd()
